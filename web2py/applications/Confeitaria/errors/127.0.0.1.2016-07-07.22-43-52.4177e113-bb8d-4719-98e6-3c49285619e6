(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Query' object has no attribute 'nome'"
p3
sS'layer'
p4
S'/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef BuscarCliente():\n\tform = SQLFORM.factory(\n\t\tField(\'nome\', \'string\', requires=IS_NOT_EMPTY(error_message=\'Digite seu nome\')),\n\t\tField(\'dataNasc\', \'date\', label=\'Data de nascimento\', requires=IS_DATE(error_message=\'Insira uma data v\xc3\xa1lida\')),\n\t\tsubmit_button=\'Buscar\',\n\t)\n\tform.add_button(\'Continuar\', URL(\'CadastrarCliente\'))\n\tquery = Cliente.id < 0\n\tnomeCliente=\'\'\n\tresultados=\'\'\n\tif form.process().accepted:\n\t\tnomeCliente = form.vars.nome\n\t\tdtNascCliente = form.vars.dataNasc\n\t\tif nomeCliente != None and dtNascCliente != None:\n\t\t\tquery = Cliente.id > 0\n\t\t\tquery &= Cliente.nome.like(\'%\' + nomeCliente + \'%\')\n\t\t\t#~ query &= Cliente.email == form.vars.email\n\t\t\tprint \'form\', nomeCliente, dtNascCliente\n\t\t\tprint \'banco\', query.nome, query.data_nasc\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\tcount = db(query).count()\n\tresultados = db(query).select()\n\tmsg = response.flash = T(\'%s registros encontrados\' %count)\n\treturn dict(form=form, resultados=resultados)\n\ndef CadastrarCliente():\n\tform = SQLFORM.factory(Cliente, Telefone, Endereco, submit_button=\'Salvar\')\n\tif form.process(keepvalues=True).accepted:\n\t\tid = Cliente.insert(**db.clientes._filter_fields(form.vars))\n\t\tform.vars.codCliente = id\n\t\tidCliente = id\n\t\tid = Endereco.insert(**db.endereco._filter_fields(form.vars))\n\t\tidEndereco = id\n\t\tid = Telefone.insert(**db.telefone._filter_fields(form.vars))\n\t\tidTelefone = id\n\t\tid = Endereco_Cliente.insert(codEndereco = int(idEndereco), codCliente = int(idCliente))\n\t\tid = Telefone_Cliente.insert(codTelefone = int(idTelefone), codCliente = int(idCliente))\n\t\tdb.commit()\n\t\tresponse.flash = \'Cliente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarFornecedor():\n\tform = SQLFORM.factory(Fornecedor, Telefone, Endereco, submit_button=\'Salvar\')\n\tif form.process(keepvalues=True).accepted:\n\t\tid = Fornecedor.insert(**db.fornecedor._filter_fields(form.vars))\n\t\tform.vars.codFornecedor = id\n\t\tidFornecedor = id\n\t\tid = Endereco.insert(**db.endereco._filter_fields(form.vars))\n\t\tidEndereco = id\n\t\tid = Telefone.insert(**db.telefone._filter_fields(form.vars))\n\t\tidTelefone = id\n\t\tid = Endereco_Fornecedor.insert(codEndereco = int(idEndereco), codFornecedor = int(idFornecedor))\n\t\tid = Telefone_Fornecedor.insert(codTelefone = int(idTelefone), codFornecedor = int(idFornecedor))\n\t\tdb.commit()\n\t\tresponse.flash = \'Cliente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarItem():\n\tform = SQLFORM.factory(Item,\n\t\tsubmit_button=\'Adicionar ingrediente\',\n\t\tkeepvalues=True,\n\t)\n\tform.add_button(\'Calcular Pre\xc3\xa7o\', URL(\'CadastrarItem\'))\n\tform.add_button(\'Continuar\', URL(\'CadastrarOrcamento\'))\n\tif form.process(keepvalues=True).accepted:\n\t\tp_unit = float(form.vars.precoUnitario)\n\t\tquant = int(form.vars.quantidade)\n\t\tprecoTotal = float(p_unit * quant)\n\t\tif p_unit != None and quant != None:\n\t\t\tprint float(p_unit), int(quant), float(precoTotal), type(p_unit), type(quant), type(precoTotal)\n\t\t\tform.vars.precoTotal = precoTotal\n\t\t#~ item.id\titem.nome\titem.descricao\titem.precoUnitario\titem.quantidade\titem.unidade\titem.precoTotal\n\t\tid = Item.insert(**db.item._filter_fields(form.vars))\n\t\tdb.commit()\n\t\tredirect(URL(\'CadastrarItem\'))\n\t\tresponse.flash = \'Ingrediente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarProduto():\n\tform = SQLFORM.factory(Produto,\n\t\t#~ Field(\'nome\', \'string\', requires(IS_NOT_EMPTY())),\n\t\t#~ Field(\'descricao\', \'string\', requires(IS_NOT_EMPTY())),\n\t\t#~ Field(\'precoUnitario\', \'float\', requires(IS_NOT_EMPTY())),\n\t\t#~ Field(\'custo_ingredientes\', \'float\', requires(IS_NOT_EMPTY())),\n\t\t#~ Field(\'custo_fabricacao\', \'float\', requires(IS_NOT_EMPTY())),\n\t\t#~ Field(\'custo_final\', \'float\', requires(IS_NOT_EMPTY())),\n\t\tsubmit_button=\'Adicionar produto\',\n\t)\n\tform.add_button(\'Calcular Pre\xc3\xa7o\', URL(\'CadastrarProduto\'))\n\tform.add_button(\'Continuar\', URL(\'CadastrarPedido\'))\n\tif form.process(keepvalues=True).accepted:\n\t\tid = Produto.insert(**db.produto._filter_fields(form.vars))\n\t\tdb.commit()\n\t\tredirect(URL(\'CadastrarItem\'))\n\t\tresponse.flash = \'Produto cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarPedido():\n\tform = SQLFORM.factory(Pedido, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\t\tredirect(URL(\'CadastrarOrcamento\'))\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarOrcamento():\n\tform = SQLFORM(Orcamento, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\n\n\nresponse._vars=response._caller(BuscarCliente)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 186, in <module>\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 79, in BuscarCliente\n    print \'banco\', query.nome, query.data_nasc\nAttributeError: \'Query\' object has no attribute \'nome\'\n'
p11
s.