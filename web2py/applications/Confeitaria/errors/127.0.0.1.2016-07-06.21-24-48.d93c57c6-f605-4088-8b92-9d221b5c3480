(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> Field: invalid field name: descri\xc3\xa7\xc3\xa3o, use rname for "funny" names'
p3
sS'layer'
p4
S'/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef BuscarCliente():\n\tform = SQLFORM.factory(\n\t\tField(\'nome\', \'string\', requires=IS_NOT_EMPTY(error_message=\'Digite seu nome\')),\n\t\tsubmit_button=\'Buscar\',\n\t)\n\tform.add_button(\'Continuar\', URL(\'CadastrarCliente\'))\n\tquery = Cliente.id < 0\n\tnomeCliente=\'\'\n\tresultados=\'\'\n\tif form.process().accepted:\n\t\tnomeCliente = form.vars.nome\n\t\tif nomeCliente:\n\t\t\tquery = Cliente.id > 0\n\t\t\tquery &= Cliente.nome.like(\'%\' + nomeCliente + \'%\')\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\tcount = db(query).count()\n\tresultados = db(query).select()\n\tmsg = response.flash = T(\'%s registros encontrados\' %count)\n\treturn dict(form=form, resultados=resultados)\n\ndef CadastrarCliente():\n\tform = SQLFORM.factory(Cliente, Telefone, Endereco, submit_button=\'Salvar\')\n\tif form.process(keepvalues=True).accepted:\n\t\tid = Cliente.insert(**db.clientes._filter_fields(form.vars))\n\t\tform.vars.codCliente = id\n\t\tidCliente = id\n\t\tid = Endereco.insert(**db.endereco._filter_fields(form.vars))\n\t\tidEndereco = id\n\t\tid = Telefone.insert(**db.telefone._filter_fields(form.vars))\n\t\tidTelefone = id\n\t\tid = Endereco_Cliente.insert(codEndereco = int(idEndereco), codCliente = int(idCliente))\n\t\tid = Telefone_Cliente.insert(codTelefone = int(idTelefone), codCliente = int(idCliente))\n\t\tdb.commit()\n\t\tresponse.flash = \'Cliente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarPedido():\n\tform = SQLFORM.factory(Pedido, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\t\tredirect(URL(\'CadastrarOrcamento\'))\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarItem():\n\t"""\'nome\', \'string\', label=\'Nome do ingrediente\'),\n\tField(\'descricao\', \'string\', label=\'Descri\xc3\xa7\xc3\xa3o\'),\n\tField(\'precoUnitario\', \'float\', label=\'Pre\xc3\xa7o por unidade\'),\n\tField(\'quantidade\', \'integer\', label=\'Quantidade total\'),\n\tField(\'unidade\'\n\t"""\n\tform = SQLFORM.factory(\n\t\tField(\'nome\', requires(IS_NOT_EMPTY())),\n\t\tField(\'descri\xc3\xa7\xc3\xa3o\', requires(IS_NOT_EMPTY())),\n\t\tField(\'precoUnitario\', requires(IS_NOT_EMPTY())),\n\t\tField(\'quantidade\', requires(IS_NOT_EMPTY())),\n\t\tField(\'unidade\', requires(IS_NOT_EMPTY())),\n\t\tsubmit_button=\'Salvar\'\n\t)\n\tform.add_button(\'Adicionar produto\', URL(\'CadastrarItem\'))\n\tform.add_button(\'Continuar\', URL(\'CadastrarOrcamento\'))\n\tif form.process().accepted:\n\t\tresponse.flash = \'Ingrediente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarOrcamento():\n\tform = SQLFORM(Orcamento, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\t\tredirect(URL(\'CadastrarItem\'))\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\n\n\nresponse._vars=response._caller(CadastrarItem)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 143, in <module>\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 118, in CadastrarItem\n    Field(\'descri\xc3\xa7\xc3\xa3o\', requires(IS_NOT_EMPTY())),\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/packages/dal/pydal/objects.py", line 1438, in __init__\n    \'use rname for "funny" names\' % fieldname)\nSyntaxError: Field: invalid field name: descri\xc3\xa7\xc3\xa3o, use rname for "funny" names\n'
p11
s.