(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> unsupported operand type(s) for &: 'str' and 'Field'"
p3
sS'layer'
p4
S'/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Crud\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #~ response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef BuscarCliente():\n\t#~ form = SQLFORM(db.clientes, submit_button=\'Procurar\', fields=[\'nome\', \'data_nasc\'])\n\t#~ consulta = db(db.clientes).select()\n\tform = SQLFORM.factory(\n\t\tField(\'nome\', requires=IS_NOT_EMPTY(error_message=\'Digite seu nome\')),\n\t\tField(\'data_nasc\', requires=IS_DATE(error_message=\'Informe uma data v\xc3\xa1lida\'), label=\'Data de nascimento\'),\n\t\tsubmit_button=\'Buscar\'\n\t)\n\tnomeCliente = request.vars.nome\n\tDataNasc = request.vars.data_nasc\n\tconsulta = db(db.clientes.nome == nomeCliente & db.clientes.data_nasc == DataNasc).select()\n\tprint consulta\n\t#~ if form.process().accepted:\n\t\t#~ response.flash = \'Cliente encontrado!\'\n\t\t#~ print "Nome", nomeCliente\n\t\t#~ print "data nascimento", DataNasc\n\t#~ elif form.errors:\n\t\t#~ print \'Est\xc3\xa1 vazio\'\n\t\t#~ response.flash = \'Cliente n\xc3\xa3o foi encontrado! Acesse a op\xc3\xa7\xc3\xa3o "Cadastrar Cliente"\'\n\treturn dict(form=form)\n\ndef CadastrarCliente():\n\tform = SQLFORM(db.clientes, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Cliente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\t\t\n\treturn dict(form=form)\n\ndef CadastrarItem():\n\tform = SQLFORM(db.item, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Ingrediente cadastrado com sucesso!\'\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarPedido():\n\tform = SQLFORM(db.pedido, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\t\tredirect(URL(\'CadastrarOrcamento\'))\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\ndef CadastrarOrcamento():\n\tform = SQLFORM(db.orcamento, submit_button=\'Salvar\')\n\tif form.process().accepted:\n\t\tresponse.flash = \'Pedido cadastrado com sucesso!\'\n\t\tredirect(URL(\'CadastrarItem\'))\n\telif form.errors:\n\t\tresponse.flash = \'Verifique as informa\xc3\xa7\xc3\xb5es inseridas!\'\n\treturn dict(form=form)\n\n\n\nresponse._vars=response._caller(BuscarCliente)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 120, in <module>\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/media/anderson/5B8F2F2D60461C6E/BSI/Engenharia de Software I/Projeto disciplina/web2py/applications/Confeitaria/controllers/default.py", line 72, in BuscarCliente\n    consulta = db(db.clientes.nome == nomeCliente & db.clientes.data_nasc == DataNasc).select()\nTypeError: unsupported operand type(s) for &: \'str\' and \'Field\'\n'
p11
s.